
monster_bot.c

void Bot_Think(ServerEntity_t *bot)
{
	Weapon_t *wActiveWeapon;

	switch ()

	// If the bot isn't dead, then add animations.
	if(eBot->Monster.iState != STATE_DEAD)
	{
		if(eBot->v.flags & FL_ONGROUND)
		{
			if((	(eBot->v.velocity[0] < -4.0f || eBot->v.velocity[0] > 4.0f)	|| 
					(eBot->v.velocity[1] < -4.0f || eBot->v.velocity[1] > 4.0f))	&& 
					(!eBot->local.dAnimationTime || eBot->local.iAnimationEnd == 9))
				Entity_Animate(eBot,PlayerAnimation_Walk);
			else if((eBot->v.velocity[0] == 0 || eBot->v.velocity[1] == 0) && (!eBot->local.dAnimationTime || eBot->local.iAnimationEnd > 9))
			{
#ifdef GAME_OPENKATANA
				if(eBot->v.iActiveWeapon == WEAPON_DAIKATANA)
					Entity_Animate(eBot,PlayerAnimation_KatanaIdle);
				else
#endif
					Entity_Animate(eBot,PlayerAnimation_Idle);
			}
		}
	}

	switch(eBot->Monster.iThink)
	{
	case THINK_IDLE:
	{
		Monster_MoveRandom(eBot, 50.0f);

		// Attempt to find an enemy.
		if (!eBot->Monster.eEnemy)
		{
			ServerEntity_t *Enemy = Monster_GetEnemy(eBot);
			if (Enemy)
			{
				eBot->Monster.eEnemy = Enemy;

				Monster_SetThink(eBot, THINK_PURSUING);
				return;
			}
		}

		Waypoint_t *wMoveTarget = Monster_GetMoveTarget(eBot);
		if (wMoveTarget)
		{
			eBot->Monster.move_target = wMoveTarget;

			Monster_SetThink(eBot, THINK_WANDERING);
			return;
		}
	}
	break;
	case THINK_ATTACKING:
	{
		if (eBot->Monster.eTarget->v.health <= 0)
			Monster_SetThink(eBot, THINK_WANDERING);

		wActiveWeapon = Weapon_GetCurrentWeapon(eBot);
		if (!wActiveWeapon)
		{
			Monster_SetThink(eBot, THINK_FLEEING);
			return;
		}

#if 1
		// Add some random movement.
		Monster_MoveRandom(eBot, BOT_MIN_SPEED);

		if (rand()%500 == 0)
			wActiveWeapon->Primary(eBot);
#endif
	}
	break;
	case THINK_FLEEING:
		// Add some random movement.
		Monster_MoveRandom(eBot, BOT_MAX_SPEED);
	break;
	case THINK_WANDERING:
		{
#if 0
			wMyWeapon = Weapon_GetCurrentWeapon(eBot);
			if(MONSTER_GetRange(eBot,eBot->v.enemy->v.origin) > 4000)
				return;
			else if(wMyWeapon->iPrimaryType == AM_MELEE && MONSTER_GetRange(eBot,eBot->v.enemy->v.origin) > MONSTER_RANGE_MELEE)
				return;
			else if(Monster_IsVisible(eBot,eBot->v.enemy))
			{
				// [5/8/2012] No ammo and it's not a melee weapon? ~hogsy
				if(!Weapon_CheckPrimaryAmmo(eBot) && wMyWeapon->iPrimaryType != AM_MELEE)
				{
					// [5/8/2012] Should probably flee ~hogsy
					Monster_SetThink(eBot,THINK_FLEEING);
					return;
				}

				Math_VectorSubtract(eBot->v.enemy->v.origin,eBot->v.origin,vAngle);

		//		ent->v.ideal_yaw	= VectorToAngles(vAngle);

				ChangeYaw(eBot);
			}
#endif
		}
		break;
	}
}

server_monster.c

#if 0
double dMonsterEmotionUpdate = 0;

/*	Used to go over each monster state then update it, and then calls the monsters
	assigned think function.
*/
void Monster_Frame(ServerEntity_t *eMonster)
{
	int i;

	// [19/2/2013] If it's not a monster then return! ~hogsy
	if(eMonster->Monster.iType < MONSTER_VEHICLE)
		return;

	Entity_CheckFrames(eMonster);

	// [26/9/2012] Handle jumping (this is copied over from sv_player.c) ~hogsy
	if(	(eMonster->local.fJumpVelocity < -300.0f)	&&
		(eMonster->v.flags & FL_ONGROUND))
	{
		// [26/9/2012] TODO: Add in think for land! ~hogsy
		// [26/9/2012] Set our jump_flag to 0 ~hogsy
		eMonster->local.fJumpVelocity = 0;
	}
	else if(!(eMonster->v.flags & FL_ONGROUND))
		eMonster->local.fJumpVelocity = eMonster->v.velocity[2];

	switch (eMonster->Monster.state)
	{
	case MONSTER_STATE_DEAD:
		// [6/8/2012] Dead creatures don't have emotions... ~hogsy
		// [23/9/2012] Simplified ~hogsy
		for(i = 0; i < EMOTION_NONE; i++)
			eMonster->Monster.fEmotion[i] = 0;

		// [20/9/2012] TODO: Check if we should gib? ~hogsy
		break;
	case MONSTER_STATE_ASLEEP:
		eMonster->Monster.fEmotion[EMOTION_BOREDOM]++;
		break;
	case MONSTER_STATE_AWAKE:
		switch(eMonster->Monster.think)
		{
		case MONSTER_THINK_WANDERING:
			eMonster->Monster.fEmotion[EMOTION_BOREDOM]--;
			eMonster->Monster.fEmotion[EMOTION_ANGER]--;
			break;
		case MONSTER_THINK_ATTACKING:
			eMonster->Monster.fEmotion[EMOTION_BOREDOM]--;
			eMonster->Monster.fEmotion[EMOTION_ANGER]++;
			break;
		case MONSTER_THINK_FLEEING:
			eMonster->Monster.fEmotion[EMOTION_BOREDOM]--;
			if(eMonster->Monster.fEmotion[EMOTION_ANGER] >= 50.0f)
				eMonster->Monster.fEmotion[EMOTION_FEAR]--;
			else
				eMonster->Monster.fEmotion[EMOTION_FEAR]++;
			break;
		case MONSTER_THINK_PURSUING:
			// [1/9/2013] TODO: Handle emotions... ~hogsy
			break;
		case MONSTER_THINK_IDLE:
			eMonster->Monster.fEmotion[EMOTION_BOREDOM]++;
			break;
		default:
			Engine.Con_Warning("No think was set for %s at spawn!\n",eMonster->v.classname);

			Monster_SetThink(eMonster,MONSTER_THINK_IDLE);
			return;
		}
		break;
	default:
		Engine.Con_Warning("Unknown state set for monster! (%s)\n",eMonster->v.classname);
	}

	// [6/8/2012] Don't let the emotion value get too high or low ~hogsy
	// [30/6/2013] Moved down here ~hogsy


	if(eMonster->Monster.Think)
		eMonster->Monster.Think(eMonster);
}
#endif

void Monster_SetTargets(ServerEntity_t *eMonster)
{
	int	iRelationship;

	if(!eMonster->Monster.eTarget)
	{
		eMonster->Monster.eTarget = Monster_GetTarget(eMonster);
		if(eMonster->Monster.eTarget)
		{
			if((eMonster->Monster.eTarget == eMonster->Monster.eFriend) || (eMonster->Monster.eTarget == eMonster->Monster.eEnemy))
				return;

			iRelationship = Monster_GetRelationship(eMonster,eMonster->Monster.eTarget);
			if(iRelationship == RELATIONSHIP_LIKE)
			{
				eMonster->Monster.eFriend = eMonster->Monster.eTarget;
				eMonster->Monster.eTarget = NULL;
			}
			else if (iRelationship == MONSTER_RELATIONSHIP_HATE)
			{
				eMonster->Monster.eEnemy	= eMonster->Monster.eTarget;
				eMonster->Monster.eTarget	= NULL;
			}
		}
	}
}

// TODO: This is obsolete.
bool Monster_WalkMove(ServerEntity_t *ent,float yaw,float dist)
{
	MathVector3f_t move;

	if(!(ent->v.flags & (FL_ONGROUND|FL_FLY|FL_SWIM)))
		return false;

	yaw *= (float)pMath_PI*2.0f/360.0f;

	move[0] = (vec_t)cos(yaw)*dist;
	move[1] = (vec_t)sin(yaw)*dist;
	move[2] = 0;

	return Monster_MoveStep(ent,move,true);
}